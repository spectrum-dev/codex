version: '3.8'

x-common-variables: &common-variables
    CELERY_BACKEND_DATABASE_NAME: celery-backend
    DJANGO_DEBUG: 1
    DATABASE_USER: root
    DATABASE_PASSWORD: password
    DATABASE_HOST: postgres
    DATABASE_PORT: 5432
    API_BASE_URL: http://block-monolith:8000
    RABBIT_MQ_URL: amqp://guest:guest@rabbitmq:5672
    SENTRY_DSN: ""

services:
    orchestration:
        build:
            context: ${ASSEMBLER_PROJECT_DIR:-..}/django-orchestration
        ports:
            - 8080:8000
        environment:
            <<: *common-variables
            DATABASE_NAME: postgres
        depends_on:
            - postgres
            - rabbitmq
        volumes:
            - ${ASSEMBLER_PROJECT_DIR:-..}/django-orchestration/:/usr/src/app/
        entrypoint: ''
        command: './docker-entrypoint.sh'
        networks:
            - default
    
    orchestration-worker-backtest:
        build:
            context: ${ASSEMBLER_PROJECT_DIR:-..}/django-orchestration
        environment:
            <<: *common-variables
            DATABASE_NAME: postgres
        depends_on:
            - postgres
            - rabbitmq
        volumes:
            - ${ASSEMBLER_PROJECT_DIR:-..}/django-orchestration/:/usr/src/app/
        entrypoint: ''
        command: 'celery -A orchestration worker -Q backtest -l INFO --concurrency 10 -n orchestration-backtest@%h'
        networks:
            - default
    
    orchestration-worker-screener:
        build:
            context: ${ASSEMBLER_PROJECT_DIR:-..}/django-orchestration
        environment:
            <<: *common-variables
            DATABASE_NAME: postgres
        depends_on:
            - postgres
            - rabbitmq
        volumes:
            - ${ASSEMBLER_PROJECT_DIR:-..}/django-orchestration/:/usr/src/app/
        entrypoint: ''
        command: 'celery -A orchestration worker -Q screener -l INFO --concurrency 10 -n orchestration-worker@%h'
        networks:
            - default
    
    orchestration-worker-beat:
        build:
            context: ${ASSEMBLER_PROJECT_DIR:-..}/django-orchestration
        environment:
            <<: *common-variables
            DATABASE_NAME: postgres
        depends_on:
            - postgres
            - rabbitmq
        volumes:
            - ${ASSEMBLER_PROJECT_DIR:-..}/django-orchestration/:/usr/src/app/
        entrypoint: ''
        command: 'celery -A orchestration beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler'
        networks:
            - default
    
    postgres:
        image: postgres:13.3
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
            timeout: 45s
            interval: 10s
            retries: 10
        restart: always
        environment:
            - POSTGRES_USER=root
            - POSTGRES_PASSWORD=password
            - APP_DB_USER=docker
            - APP_DB_PASS=docker
            - APP_DB_NAME=orchestration
        volumes:
            - ./orchestration-db/01-init.sql:/docker-entrypoint-initdb.d/db.sql
            - ./postgres-data:/var/lib/postgresql/data
        ports:
            - 54321:5432
        networks:
            - default
    
    block-monolith:
        build:
            context: ${ASSEMBLER_PROJECT_DIR:-..}/django-block-monolith
            dockerfile: Dockerfile.m1
        ports:
            - 8000:8000
        environment:
            <<: *common-variables
            ALPHA_VANTAGE_API_KEY: TROTOWG20AM6Z39Z
            DJANGO_SECRET_KEY: django-public-secret-key
            DATABASE_NAME: default
            DATA_BANK_DATABASE_NAME: data-bank
            DATA_BANK_DATABASE_USER: root
            DATA_BANK_DATABASE_PASSWORD: password
            DATA_BANK_DATABASE_HOST: postgres
            DATA_BANK_DATABASE_PORT: 5432
            EOD_HISTORICAL_DATA_API_KEY: 61543cba1ee392.50941658
        volumes:
            - ${ASSEMBLER_PROJECT_DIR:-..}/django-block-monolith/:/usr/src/app/
        depends_on:
            - rabbitmq
            - postgres
        entrypoint: ''
        command: './docker-entrypoint.sh'
        networks:
            - default
    
    block-monolith-worker:
        build:
            context: ${ASSEMBLER_PROJECT_DIR:-..}/django-block-monolith
            dockerfile: Dockerfile.m1
        environment:
            <<: *common-variables
            ALPHA_VANTAGE_API_KEY: TROTOWG20AM6Z39Z
            DJANGO_SECRET_KEY: django-public-secret-key
            DATABASE_NAME: default
            DATA_BANK_DATABASE_NAME: data-bank
            DATA_BANK_DATABASE_USER: root
            DATA_BANK_DATABASE_PASSWORD: password
            DATA_BANK_DATABASE_HOST: postgres
            DATA_BANK_DATABASE_PORT: 5432
            EOD_HISTORICAL_DATA_API_KEY: 61543cba1ee392.50941658
        volumes:
            - ${ASSEMBLER_PROJECT_DIR:-..}/django-block-monolith/:/usr/src/app/
        depends_on:
            - rabbitmq
            - postgres
        entrypoint: ''
        command: 'celery -A blocks worker -Q blocks -l DEBUG -n block-monolith@%h'
        networks:
            - default
    
    flower:  
        image: mher/flower
        environment:
            - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672
            - FLOWER_PORT=8888
        depends_on:
            - rabbitmq
        ports:  
            - 8888:8888
        networks:
            - default

    rabbitmq:
        image: "rabbitmq:3-management"
        ports:
            - "15672:15672"
            - "5672:5672"
        labels:
            NAME: "rabbitmq"
        networks:
            - default
